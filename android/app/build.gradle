plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

android {
    namespace "com.cocogoat.app.cocogoat_app"
    compileSdk flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.cocogoat.app"
        minSdkVersion 21
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        
        // 支持多语言
        resConfigs "zh", "zh-rCN", "zh-rTW", "en", "ja"
    }

    signingConfigs {
        debug {
            // Android Studio 默认的 debug 签名配置
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file('debug.keystore')
            storePassword 'android'
        }
        release {
            // 使用环境变量或默认值
            keyAlias System.getenv('KEY_ALIAS') ?: 'cocogoat'
            keyPassword System.getenv('KEY_PASSWORD') ?: 'cocogoat123'
            // 优先使用环境变量指定的密钥库路径
            def keystorePath = System.getenv('KEYSTORE_PATH') ?: 'cocogoat-keystore.jks'
            // 检查密钥库文件是否存在，如果不存在则使用debug签名
            storeFile file(keystorePath).exists() ? file(keystorePath) : null
            storePassword System.getenv('STORE_PASSWORD') ?: 'cocogoat123'
        }
    }

    buildTypes {
        release {
            // 根据密钥库文件是否存在决定使用哪个签名配置
            def useReleaseSigning = signingConfigs.release.storeFile != null
            signingConfig useReleaseSigning ? signingConfigs.release : signingConfigs.debug
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

